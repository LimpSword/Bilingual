Transform: AWS::Serverless-2016-10-31
Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: Api
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /api/login:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostLogin.Arn}/invocations
              responses: {}
          /api/register:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostRegister.Arn}/invocations
              responses: {}
          /api/leaderboard:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Leaderboard.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        MaxAge: 5
        AllowOrigin: '''*'''
        AllowMethods: '''POST,OPTIONS'''
        AllowHeaders: '''Content-Type'''
  Users:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
        - AttributeName: password
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  PostLogin:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: PostLogin
      CodeUri: login
      Handler: app.lambda_handler
      Runtime: python3.10
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Events:
        ApiPOSTlogin:
          Type: Api
          Properties:
            Path: /api/login
            Method: POST
            RestApiId: !Ref Api
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref Users
          USERS_TABLE_ARN: !GetAtt Users.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Users
    Metadata:
      SamResourceId: PostLogin
  PostLoginLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${PostLogin}
  PostRegister:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: PostRegister
      CodeUri: register
      Handler: app.lambda_handler
      Runtime: python3.10
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Events:
        ApiPOSTregister:
          Type: Api
          Properties:
            Path: /api/register
            Method: POST
            RestApiId: !Ref Api
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref Users
          USERS_TABLE_ARN: !GetAtt Users.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Users
    Metadata:
      SamResourceId: PostRegister
  PostRegisterLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${PostRegister}
  Leaderboard:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: Leaderboard
      CodeUri: leaderboard
      Handler: app.lambda_handler
      Runtime: python3.10
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Events:
        ApiGETleaderboard:
          Type: Api
          Properties:
            Path: /api/leaderboard
            Method: GET
            RestApiId: !Ref Api
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref Users
          USERS_TABLE_ARN: !GetAtt Users.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Users
    Metadata:
      SamResourceId: Leaderboard
  LeaderboardLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${Leaderboard}
Metadata:
  AWS::Composer::Groups:
    Group:
      Label: Api
      Members:
        - Leaderboard
        - PostRegister
        - PostLogin