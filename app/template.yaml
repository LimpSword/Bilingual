Transform: AWS::Serverless-2016-10-31
Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: Api
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /api/login:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostLogin.Arn}/invocations
              responses: {}
          /api/register:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostRegister.Arn}/invocations
              responses: {}
          /api/leaderboard:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Leaderboard.Arn}/invocations
              responses: {}
          /api/random-word:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetRandomWord.Arn}/invocations
              responses: {}
          /api/check-translation:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CheckTranslation.Arn}/invocations
              responses: {}
          /api/new-category:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetFromWord.Arn}/invocations
              responses: {}
          /api/get-categories:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCategories.Arn}/invocations
              responses: {}
          /api/get-category-words:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCategoriesWords.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        MaxAge: 5
        AllowOrigin: '''*'''
        AllowMethods: '''POST,OPTIONS,GET'''
        AllowHeaders: '''Content-Type'''
  Users:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
        - AttributeName: password
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  PostLogin:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: PostLogin
      CodeUri: login
      Handler: app.lambda_handler
      Runtime: python3.10
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Events:
        ApiPOSTlogin:
          Type: Api
          Properties:
            Path: /api/login
            Method: POST
            RestApiId: !Ref Api
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref Users
          USERS_TABLE_ARN: !GetAtt Users.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Users
    Metadata:
      SamResourceId: PostLogin
  PostLoginLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${PostLogin}
  PostRegister:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: PostRegister
      CodeUri: register
      Handler: app.lambda_handler
      Runtime: python3.10
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Events:
        ApiPOSTregister:
          Type: Api
          Properties:
            Path: /api/register
            Method: POST
            RestApiId: !Ref Api
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref Users
          USERS_TABLE_ARN: !GetAtt Users.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Users
    Metadata:
      SamResourceId: PostRegister
  PostRegisterLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${PostRegister}
  Leaderboard:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: Leaderboard
      CodeUri: leaderboard
      Handler: app.lambda_handler
      Runtime: python3.10
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Events:
        ApiGETleaderboard:
          Type: Api
          Properties:
            Path: /api/leaderboard
            Method: GET
            RestApiId: !Ref Api
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref Users
          USERS_TABLE_ARN: !GetAtt Users.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Users
    Metadata:
      SamResourceId: Leaderboard
  LeaderboardLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${Leaderboard}
  GetRandomWord:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetRandomWord
      CodeUri: random_word
      Handler: app.lambda_handler
      Runtime: python3.10
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          TRANSLATIONS_TABLE_NAME: !Ref TranslationsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TranslationsTable
      Events:
        ApiGETapirandomword:
          Type: Api
          Properties:
            Path: /api/random-word
            Method: GET
            RestApiId: !Ref Api
    Metadata:
      SamResourceId: GetRandomWord
  GetRandomWordLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetRandomWord}
  CheckTranslation:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: CheckTranslation
      CodeUri: check_translation
      Handler: app.lambda_handler
      Runtime: python3.10
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Events:
        ApiPOSTapichecktranslation:
          Type: Api
          Properties:
            Path: /api/check-translation
            Method: POST
            RestApiId: !Ref Api
      Environment:
        Variables:
          TRANSLATIONS_TABLE_NAME: !Ref TranslationsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TranslationsTable
    Metadata:
      SamResourceId: CheckTranslation
  CheckTranslationLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${CheckTranslation}
  TranslationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: hash
          AttributeType: S
        - AttributeName: english
          AttributeType: S
        - AttributeName: french
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: hash
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: EnglishIndex
          KeySchema:
            - AttributeName: english
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  GetFromWord:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetFromWord
      CodeUri: newCategory
      Handler: app.lambda_handler
      Runtime: python3.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        ApiPOSTapinewcategory:
          Type: Api
          Properties:
            Path: /api/new-category
            Method: POST
            RestApiId: !Ref Api
      Environment:
        Variables:
          CATEGORIES_TABLE_NAME: !Ref Categories
          CATEGORIES_TABLE_ARN: !GetAtt Categories.Arn
          CATEGORIESWORDS_TABLE_NAME: !Ref CategoriesWords
          CATEGORIESWORDS_TABLE_ARN: !GetAtt CategoriesWords.Arn
          TRANSLATIONS_TABLE_NAME: !Ref TranslationsTable
          TRANSLATIONS_TABLE_NAME_ARN: !GetAtt TranslationsTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Categories
        - DynamoDBCrudPolicy:
            TableName: !Ref CategoriesWords
        - DynamoDBCrudPolicy:
            TableName: !Ref TranslationsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref Categories
        - DynamoDBCrudPolicy:
            TableName: !Ref CategoriesWords
  GetFromWordLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetFromWord}
  Categories:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: categoryName
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: categoryName
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  CategoriesWords:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: categoryName
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: categoryName
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  GetCategories:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetCategories
      CodeUri: getCategories
      Handler: app.lambda_handler
      Runtime: python3.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        ApiGETapigetcategories:
          Type: Api
          Properties:
            Path: /api/get-categories
            Method: GET
            RestApiId: !Ref Api
      Environment:
        Variables:
          CATEGORIES_TABLE_NAME: !Ref Categories
          CATEGORIES_TABLE_ARN: !GetAtt Categories.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Categories
  GetCategoriesLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetCategories}
  GetCategoriesWords:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetCategoriesWords
      CodeUri: getWords
      Handler: app.lambda_handler
      Runtime: python3.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          CATEGORIESWORDS_TABLE_NAME: !Ref CategoriesWords
          CATEGORIESWORDS_TABLE_ARN: !GetAtt CategoriesWords.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CategoriesWords
      Events:
        ApiPOSTapigetcategorywords:
          Type: Api
          Properties:
            Path: /api/get-category-words
            Method: POST
            RestApiId: !Ref Api
  GetCategoriesWordsLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetCategoriesWords}
Metadata:
  AWS::Composer::Groups:
    Group:
      Label: Api
      Members:
        - Leaderboard
        - PostRegister
        - PostLogin
        - GetRandomWord
        - CheckTranslation
        - GetFromWord
        - GetCategories
        - GetCategoriesWords